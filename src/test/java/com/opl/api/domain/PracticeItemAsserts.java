package com.opl.api.domain;

import static com.opl.api.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PracticeItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPracticeItemAllPropertiesEquals(PracticeItem expected, PracticeItem actual) {
        assertPracticeItemAutoGeneratedPropertiesEquals(expected, actual);
        assertPracticeItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPracticeItemAllUpdatablePropertiesEquals(PracticeItem expected, PracticeItem actual) {
        assertPracticeItemUpdatableFieldsEquals(expected, actual);
        assertPracticeItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPracticeItemAutoGeneratedPropertiesEquals(PracticeItem expected, PracticeItem actual) {
        assertThat(expected)
            .as("Verify PracticeItem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPracticeItemUpdatableFieldsEquals(PracticeItem expected, PracticeItem actual) {
        assertThat(expected)
            .as("Verify PracticeItem relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getObjective()).as("check objective").isEqualTo(actual.getObjective()))
            .satisfies(
                e ->
                    assertThat(e.getPublishDate())
                        .as("check publishDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getPublishDate())
            )
            .satisfies(e -> assertThat(e.getPublishedBy()).as("check publishedBy").isEqualTo(actual.getPublishedBy()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getApprovedBy()).as("check approvedBy").isEqualTo(actual.getApprovedBy()))
            .satisfies(
                e ->
                    assertThat(e.getApprovedDate())
                        .as("check approvedDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getApprovedDate())
            )
            .satisfies(e -> assertThat(e.getAuthors()).as("check authors").isEqualTo(actual.getAuthors()))
            .satisfies(
                e ->
                    assertThat(e.getFacilitationDifficulty())
                        .as("check facilitationDifficulty")
                        .isEqualTo(actual.getFacilitationDifficulty())
            )
            .satisfies(e -> assertThat(e.getMobiusLoopTag()).as("check mobiusLoopTag").isEqualTo(actual.getMobiusLoopTag()))
            .satisfies(e -> assertThat(e.getWhat()).as("check what").isEqualTo(actual.getWhat()))
            .satisfies(e -> assertThat(e.getWhy()).as("check why").isEqualTo(actual.getWhy()))
            .satisfies(e -> assertThat(e.getHow()).as("check how").isEqualTo(actual.getHow()))
            .satisfies(
                e ->
                    assertThat(e.getNumberOfPeopleRequired())
                        .as("check numberOfPeopleRequired")
                        .isEqualTo(actual.getNumberOfPeopleRequired())
            )
            .satisfies(e -> assertThat(e.getTimeLength()).as("check timeLength").isEqualTo(actual.getTimeLength()))
            .satisfies(
                e -> assertThat(e.getExpectedParticipants()).as("check expectedParticipants").isEqualTo(actual.getExpectedParticipants())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPracticeItemUpdatableRelationshipsEquals(PracticeItem expected, PracticeItem actual) {
        assertThat(expected)
            .as("Verify PracticeItem relationships")
            .satisfies(e -> assertThat(e.getCoverImage()).as("check coverImage").isEqualTo(actual.getCoverImage()));
    }
}
