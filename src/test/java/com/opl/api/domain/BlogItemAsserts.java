package com.opl.api.domain;

import static com.opl.api.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class BlogItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlogItemAllPropertiesEquals(BlogItem expected, BlogItem actual) {
        assertBlogItemAutoGeneratedPropertiesEquals(expected, actual);
        assertBlogItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlogItemAllUpdatablePropertiesEquals(BlogItem expected, BlogItem actual) {
        assertBlogItemUpdatableFieldsEquals(expected, actual);
        assertBlogItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlogItemAutoGeneratedPropertiesEquals(BlogItem expected, BlogItem actual) {
        assertThat(expected)
            .as("Verify BlogItem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlogItemUpdatableFieldsEquals(BlogItem expected, BlogItem actual) {
        assertThat(expected)
            .as("Verify BlogItem relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getSubtitle()).as("check subtitle").isEqualTo(actual.getSubtitle()))
            .satisfies(
                e ->
                    assertThat(e.getPublishDate())
                        .as("check publishDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getPublishDate())
            )
            .satisfies(e -> assertThat(e.getPublishedBy()).as("check publishedBy").isEqualTo(actual.getPublishedBy()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getApprovedBy()).as("check approvedBy").isEqualTo(actual.getApprovedBy()))
            .satisfies(
                e ->
                    assertThat(e.getApprovedDate())
                        .as("check approvedDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getApprovedDate())
            )
            .satisfies(e -> assertThat(e.getAuthors()).as("check authors").isEqualTo(actual.getAuthors()))
            .satisfies(e -> assertThat(e.getJumbotronAltText()).as("check jumbotronAltText").isEqualTo(actual.getJumbotronAltText()))
            .satisfies(e -> assertThat(e.getBody()).as("check body").isEqualTo(actual.getBody()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlogItemUpdatableRelationshipsEquals(BlogItem expected, BlogItem actual) {
        assertThat(expected)
            .as("Verify BlogItem relationships")
            .satisfies(e -> assertThat(e.getJumbotronImage()).as("check jumbotronImage").isEqualTo(actual.getJumbotronImage()));
    }
}
